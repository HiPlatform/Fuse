{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 63457fcab3016f2ead56","webpack:///./src/helpers/is_array.js","webpack:///./src/bitap/index.js","webpack:///./src/helpers/deep_value.js","webpack:///./src/helpers/highlighter.js","webpack:///./src/bitap/bitap_matched_indices.js","webpack:///./src/bitap/bitap_pattern_alphabet.js","webpack:///./src/bitap/bitap_regex_search.js","webpack:///./src/bitap/bitap_score.js","webpack:///./src/bitap/bitap_search.js","webpack:///./src/index.js"],"names":["module","exports","Array","isArray","Object","prototype","toString","call","obj","bitapRegexSearch","require","bitapSearch","patternAlphabet","Bitap","pattern","location","distance","threshold","maxPatternLength","isCaseSensitive","tokenSeparator","findAllMatches","minMatchCharLength","options","toLowerCase","length","text","isMatch","score","matchedIndices","deepValue","path","list","push","dotIndex","indexOf","firstSegment","remaining","slice","value","undefined","i","len","resultItem","objOptions","prefix","highlight","suffix","recursiveOpt","recursive","matches","forEach","item","matchItem","key","result","concat","indices","pair","shift","char","charAt","join","enabled","highlighter","child","matchmask","start","end","match","mask","SPECIAL_CHARS_REGEX","regex","RegExp","replace","matchesLen","errors","currentLocation","expectedLocation","accuracy","proximity","Math","abs","bitapScore","textLen","currentThreshold","bestLocation","patternLen","matchMask","min","lastIndexOf","lastBitArr","finalScore","binMax","binMin","binMid","floor","max","finish","bitArr","j","charMatch","Fuse","caseSensitive","id","keys","shouldSort","getFn","sortFn","a","b","tokenize","matchAllTokens","includeMatches","includeScore","verbose","setCollection","_log","_prepareSearchers","tokenSearchers","fullSearcher","_search","weights","results","_computeScore","_sort","_format","tokens","split","resultMap","_analyze","record","index","keysLen","name","weight","Error","children","assign","idx","output","arrayIndex","exists","averageScore","numTextMatches","mainSearchResult","search","words","scores","tokenSearcher","hasMatchInText","word","tokenSearchResult","scoresLen","checkTextMatches","existingResult","scoreLen","currScore","bestScore","nScore","sort","finalOutput","JSON","stringify","transformers","data","hasOwnProperty","log","arguments"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AChEAA,OAAOC,OAAP,GAAiB;AAAA,SAAO,CAACC,MAAMC,OAAP,GAAiBC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BC,GAA/B,MAAwC,gBAAzD,GAA4EN,MAAMC,OAAN,CAAcK,GAAd,CAAnF;AAAA,CAAjB,C;;;;;;;;;;;;;ACAA,IAAMC,mBAAmB,mBAAAC,CAAQ,CAAR,CAAzB;AACA,IAAMC,cAAc,mBAAAD,CAAQ,CAAR,CAApB;AACA,IAAME,kBAAkB,mBAAAF,CAAQ,CAAR,CAAxB;;IAEMG,K;AACJ,iBAAaC,OAAb,QAuBG;AAAA,6BArBDC,QAqBC;AAAA,QArBDA,QAqBC,iCArBU,CAqBV;AAAA,6BAfDC,QAeC;AAAA,QAfDA,QAeC,iCAfU,GAeV;AAAA,8BAZDC,SAYC;AAAA,QAZDA,SAYC,kCAZW,GAYX;AAAA,qCAVDC,gBAUC;AAAA,QAVDA,gBAUC,yCAVkB,EAUlB;AAAA,oCARDC,eAQC;AAAA,QARDA,eAQC,wCARiB,KAQjB;AAAA,mCANDC,cAMC;AAAA,QANDA,cAMC,uCANgB,KAMhB;AAAA,mCAHDC,cAGC;AAAA,QAHDA,cAGC,uCAHgB,KAGhB;AAAA,qCADDC,kBACC;AAAA,QADDA,kBACC,yCADoB,CACpB;;AAAA;;AACD,SAAKC,OAAL,GAAe;AACbR,wBADa;AAEbC,wBAFa;AAGbC,0BAHa;AAIbC,wCAJa;AAKbC,sCALa;AAMbC,oCANa;AAObC,oCAPa;AAQbC;AARa,KAAf;;AAWA,SAAKR,OAAL,GAAe,KAAKS,OAAL,CAAaJ,eAAb,GAA+BL,OAA/B,GAAyCA,QAAQU,WAAR,EAAxD;;AAEA,QAAI,KAAKV,OAAL,CAAaW,MAAb,IAAuBP,gBAA3B,EAA6C;AAC3C,WAAKN,eAAL,GAAuBA,gBAAgB,KAAKE,OAArB,CAAvB;AACD;AACF;;;;2BAEOY,I,EAAM;AACZ,UAAI,CAAC,KAAKH,OAAL,CAAaJ,eAAlB,EAAmC;AACjCO,eAAOA,KAAKF,WAAL,EAAP;AACD;;AAED;AACA,UAAI,KAAKV,OAAL,KAAiBY,IAArB,EAA2B;AACzB,eAAO;AACLC,mBAAS,IADJ;AAELC,iBAAO,CAFF;AAGLC,0BAAgB,CAAC,CAAC,CAAD,EAAIH,KAAKD,MAAL,GAAc,CAAlB,CAAD;AAHX,SAAP;AAKD;;AAED;AAdY,qBAeiC,KAAKF,OAftC;AAAA,UAeJL,gBAfI,YAeJA,gBAfI;AAAA,UAecE,cAfd,YAecA,cAfd;;AAgBZ,UAAI,KAAKN,OAAL,CAAaW,MAAb,GAAsBP,gBAA1B,EAA4C;AAC1C,eAAOT,iBAAiBiB,IAAjB,EAAuB,KAAKZ,OAA5B,EAAqCM,cAArC,CAAP;AACD;;AAED;AApBY,sBAqBkE,KAAKG,OArBvE;AAAA,UAqBJR,QArBI,aAqBJA,QArBI;AAAA,UAqBMC,QArBN,aAqBMA,QArBN;AAAA,UAqBgBC,SArBhB,aAqBgBA,SArBhB;AAAA,UAqB2BI,cArB3B,aAqB2BA,cArB3B;AAAA,UAqB2CC,kBArB3C,aAqB2CA,kBArB3C;;AAsBZ,aAAOX,YAAYe,IAAZ,EAAkB,KAAKZ,OAAvB,EAAgC,KAAKF,eAArC,EAAsD;AAC3DG,0BAD2D;AAE3DC,0BAF2D;AAG3DC,4BAH2D;AAI3DI,sCAJ2D;AAK3DC;AAL2D,OAAtD,CAAP;AAOD;;;;;;AAGH;AACA;AACA;;AAEAtB,OAAOC,OAAP,GAAiBY,KAAjB,C;;;;;;;;;ACnFA,IAAMV,UAAU,mBAAAO,CAAQ,CAAR,CAAhB;;AAEA,IAAMoB,YAAY,SAAZA,SAAY,CAACtB,GAAD,EAAMuB,IAAN,EAAYC,IAAZ,EAAqB;AACrC,MAAI,CAACD,IAAL,EAAW;AACT;AACAC,SAAKC,IAAL,CAAUzB,GAAV;AACD,GAHD,MAGO;AACL,QAAM0B,WAAWH,KAAKI,OAAL,CAAa,GAAb,CAAjB;AACA,QAAIC,eAAeL,IAAnB;AACA,QAAIM,YAAY,IAAhB;;AAEA,QAAIH,aAAa,CAAC,CAAlB,EAAqB;AACnBE,qBAAeL,KAAKO,KAAL,CAAW,CAAX,EAAcJ,QAAd,CAAf;AACAG,kBAAYN,KAAKO,KAAL,CAAWJ,WAAW,CAAtB,CAAZ;AACD;;AAED,QAAMK,QAAQ/B,IAAI4B,YAAJ,CAAd;;AAEA,QAAIG,UAAU,IAAV,IAAkBA,UAAUC,SAAhC,EAA2C;AACzC,UAAI,CAACH,SAAD,KAAe,OAAOE,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAA7D,CAAJ,EAA4E;AAC1EP,aAAKC,IAAL,CAAUM,MAAMjC,QAAN,EAAV;AACD,OAFD,MAEO,IAAIH,QAAQoC,KAAR,CAAJ,EAAoB;AACzB;AACA,aAAK,IAAIE,IAAI,CAAR,EAAWC,MAAMH,MAAMd,MAA5B,EAAoCgB,IAAIC,GAAxC,EAA6CD,KAAK,CAAlD,EAAqD;AACnDX,oBAAUS,MAAME,CAAN,CAAV,EAAoBJ,SAApB,EAA+BL,IAA/B;AACD;AACF,OALM,MAKA,IAAIK,SAAJ,EAAe;AACpB;AACAP,kBAAUS,KAAV,EAAiBF,SAAjB,EAA4BL,IAA5B;AACD;AACF;AACF;;AAED,SAAOA,IAAP;AACD,CAhCD;;AAkCAhC,OAAOC,OAAP,GAAiB,UAACO,GAAD,EAAMuB,IAAN,EAAe;AAC9B,SAAOD,UAAUtB,GAAV,EAAeuB,IAAf,EAAqB,EAArB,CAAP;AACD,CAFD,C;;;;;;;;;ACpCA/B,OAAOC,OAAP,GAAiB,UAAS0C,UAAT,EAAqBC,UAArB,EAAiC;AAChD,MAAMC,SAASD,WAAWE,SAAX,CAAqBD,MAArB,IAA+B,KAA9C;AACA,MAAME,SAASH,WAAWE,SAAX,CAAqBC,MAArB,IAA+B,MAA9C;AACA,MAAMC,eAAeJ,WAAWK,SAAhC;;AAEAN,aAAWO,OAAX,CAAmBC,OAAnB,CAA2B,qBAAa;AACtC,QAAIzB,OAAOiB,WAAWS,IAAX,CAAgBC,UAAUC,GAA1B,CAAX;AACA,QAAIC,SAAS,EAAb;AACA,QAAIL,UAAU,GAAGM,MAAH,CAAUH,UAAUI,OAApB,CAAd,CAHsC,CAGM;AAC5C,QAAIC,OAAOR,QAAQS,KAAR,EAAX;;AAEA,SAAK,IAAIlB,IAAI,CAAb,EAAgBA,IAAIf,KAAKD,MAAzB,EAAiCgB,GAAjC,EAAsC;AACpC,UAAImB,OAAOlC,KAAKmC,MAAL,CAAYpB,CAAZ,CAAX;AACA,UAAIiB,QAAQjB,KAAKiB,KAAK,CAAL,CAAjB,EAA0B;AACxBH,eAAOtB,IAAP,CAAYY,MAAZ;AACD;AACDU,aAAOtB,IAAP,CAAY2B,IAAZ;AACA,UAAIF,QAAQjB,KAAKiB,KAAK,CAAL,CAAjB,EAA0B;AACxBH,eAAOtB,IAAP,CAAYc,MAAZ;AACAW,eAAOR,QAAQS,KAAR,EAAP;AACD;AACF;AACDhB,eAAWG,SAAX,GAAuBS,OAAOO,IAAP,CAAY,EAAZ,CAAvB;;AAEA,QACEd,aAAae,OAAb,IACAf,aAAaM,GADb,IAEAX,WAAWK,aAAaM,GAAxB,CAFA,IAGAX,WAAWK,aAAaM,GAAxB,EAA6B7B,MAA7B,GAAsC,CAJxC,EAKE;AACAkB,iBAAWK,aAAaM,GAAxB,EAA6BH,OAA7B,CAAqC,iBAAS;AAC5Ca,oBAAYC,KAAZ;AACD,OAFD;AAGD;AACF,GA7BD;AA8BD,CAnCD,C;;;;;;;;;ACAAjE,OAAOC,OAAP,GAAiB,YAA4C;AAAA,MAA3CiE,SAA2C,uEAA/B,EAA+B;AAAA,MAA3B5C,kBAA2B,uEAAN,CAAM;;AAC3D,MAAIO,iBAAiB,EAArB;AACA,MAAIsC,QAAQ,CAAC,CAAb;AACA,MAAIC,MAAM,CAAC,CAAX;AACA,MAAI3B,IAAI,CAAR;;AAEA,OAAK,IAAIC,MAAMwB,UAAUzC,MAAzB,EAAiCgB,IAAIC,GAArC,EAA0CD,KAAK,CAA/C,EAAkD;AAChD,QAAI4B,QAAQH,UAAUzB,CAAV,CAAZ;AACA,QAAI4B,SAASF,UAAU,CAAC,CAAxB,EAA2B;AACzBA,cAAQ1B,CAAR;AACD,KAFD,MAEO,IAAI,CAAC4B,KAAD,IAAUF,UAAU,CAAC,CAAzB,EAA4B;AACjCC,YAAM3B,IAAI,CAAV;AACA,UAAK2B,MAAMD,KAAP,GAAgB,CAAhB,IAAqB7C,kBAAzB,EAA6C;AAC3CO,uBAAeI,IAAf,CAAoB,CAACkC,KAAD,EAAQC,GAAR,CAApB;AACD;AACDD,cAAQ,CAAC,CAAT;AACD;AACF;;AAED;AACA,MAAID,UAAUzB,IAAI,CAAd,KAAqBA,IAAI0B,KAAL,IAAe7C,kBAAvC,EAA2D;AACzDO,mBAAeI,IAAf,CAAoB,CAACkC,KAAD,EAAQ1B,IAAI,CAAZ,CAApB;AACD;;AAED,SAAOZ,cAAP;AACD,CAzBD,C;;;;;;;;;ACAA7B,OAAOC,OAAP,GAAiB,UAACa,OAAD,EAAa;AAC5B,MAAIwD,OAAO,EAAX;AACA,MAAI5B,MAAM5B,QAAQW,MAAlB;;AAEA,OAAK,IAAIgB,IAAI,CAAb,EAAgBA,IAAIC,GAApB,EAAyBD,KAAK,CAA9B,EAAiC;AAC/B6B,SAAKxD,QAAQ+C,MAAR,CAAepB,CAAf,CAAL,IAA0B,CAA1B;AACD;;AAED,OAAK,IAAIA,KAAI,CAAb,EAAgBA,KAAIC,GAApB,EAAyBD,MAAK,CAA9B,EAAiC;AAC/B6B,SAAKxD,QAAQ+C,MAAR,CAAepB,EAAf,CAAL,KAA2B,KAAMC,MAAMD,EAAN,GAAU,CAA3C;AACD;;AAED,SAAO6B,IAAP;AACD,CAbD,C;;;;;;;;;ACAA,IAAMC,sBAAsB,qCAA5B;;AAEAvE,OAAOC,OAAP,GAAiB,UAACyB,IAAD,EAAOZ,OAAP,EAA2C;AAAA,MAA3BM,cAA2B,uEAAV,KAAU;;AAC1D,MAAIoD,QAAQ,IAAIC,MAAJ,CAAW3D,QAAQ4D,OAAR,CAAgBH,mBAAhB,EAAqC,MAArC,EAA6CG,OAA7C,CAAqDtD,cAArD,EAAqE,GAArE,CAAX,CAAZ;AACA,MAAI8B,UAAUxB,KAAK2C,KAAL,CAAWG,KAAX,CAAd;AACA,MAAI7C,UAAU,CAAC,CAACuB,OAAhB;AACA,MAAIrB,iBAAiB,EAArB;;AAEA,MAAIF,OAAJ,EAAa;AACX,SAAK,IAAIc,IAAI,CAAR,EAAWkC,aAAazB,QAAQzB,MAArC,EAA6CgB,IAAIkC,UAAjD,EAA6DlC,KAAK,CAAlE,EAAqE;AACnE,UAAI4B,QAAQnB,QAAQT,CAAR,CAAZ;AACAZ,qBAAeI,IAAf,CAAoB,CAACP,KAAKS,OAAL,CAAakC,KAAb,CAAD,EAAsBA,MAAM5C,MAAN,GAAe,CAArC,CAApB;AACD;AACF;;AAED,SAAO;AACL;AACAG,WAAOD,UAAU,GAAV,GAAgB,CAFlB;AAGLA,oBAHK;AAILE;AAJK,GAAP;AAMD,CAnBD,C;;;;;;;;;ACFA7B,OAAOC,OAAP,GAAiB,UAACa,OAAD,QAAwF;AAAA,yBAA5E8D,MAA4E;AAAA,MAA5EA,MAA4E,+BAAnE,CAAmE;AAAA,kCAAhEC,eAAgE;AAAA,MAAhEA,eAAgE,wCAA9C,CAA8C;AAAA,mCAA3CC,gBAA2C;AAAA,MAA3CA,gBAA2C,yCAAxB,CAAwB;AAAA,2BAArB9D,QAAqB;AAAA,MAArBA,QAAqB,iCAAV,GAAU;;AACvG,MAAM+D,WAAWH,SAAS9D,QAAQW,MAAlC;AACA,MAAMuD,YAAYC,KAAKC,GAAL,CAASJ,mBAAmBD,eAA5B,CAAlB;;AAEA,MAAI,CAAC7D,QAAL,EAAe;AACb;AACA,WAAOgE,YAAY,GAAZ,GAAkBD,QAAzB;AACD;;AAED,SAAOA,WAAYC,YAAYhE,QAA/B;AACD,CAVD,C;;;;;;;;;ACAA,IAAMmE,aAAa,mBAAAzE,CAAQ,CAAR,CAAnB;AACA,IAAMmB,iBAAiB,mBAAAnB,CAAQ,CAAR,CAAvB;;AAEAV,OAAOC,OAAP,GAAiB,UAACyB,IAAD,EAAOZ,OAAP,EAAgBF,eAAhB,QAAuI;AAAA,2BAApGG,QAAoG;AAAA,MAApGA,QAAoG,iCAAzF,CAAyF;AAAA,2BAAtFC,QAAsF;AAAA,MAAtFA,QAAsF,iCAA3E,GAA2E;AAAA,4BAAtEC,SAAsE;AAAA,MAAtEA,SAAsE,kCAA1D,GAA0D;AAAA,iCAArDI,cAAqD;AAAA,MAArDA,cAAqD,uCAApC,KAAoC;AAAA,mCAA7BC,kBAA6B;AAAA,MAA7BA,kBAA6B,yCAAR,CAAQ;;AACtJ,MAAMwD,mBAAmB/D,QAAzB;AACA;AACA,MAAMqE,UAAU1D,KAAKD,MAArB;AACA;AACA,MAAI4D,mBAAmBpE,SAAvB;AACA;AACA,MAAIqE,eAAe5D,KAAKS,OAAL,CAAarB,OAAb,EAAsBgE,gBAAtB,CAAnB;;AAEA,MAAMS,aAAazE,QAAQW,MAA3B;;AAEA;AACA,MAAM+D,YAAY,EAAlB;AACA,OAAK,IAAI/C,IAAI,CAAb,EAAgBA,IAAI2C,OAApB,EAA6B3C,KAAK,CAAlC,EAAqC;AACnC+C,cAAU/C,CAAV,IAAe,CAAf;AACD;;AAED,MAAI6C,iBAAiB,CAAC,CAAtB,EAAyB;AACvB,QAAI1D,QAAQuD,WAAWrE,OAAX,EAAoB;AAC9B8D,cAAQ,CADsB;AAE9BC,uBAAiBS,YAFa;AAG9BR,wCAH8B;AAI9B9D;AAJ8B,KAApB,CAAZ;AAMAqE,uBAAmBJ,KAAKQ,GAAL,CAAS7D,KAAT,EAAgByD,gBAAhB,CAAnB;;AAEA;AACAC,mBAAe5D,KAAKgE,WAAL,CAAiB5E,OAAjB,EAA0BgE,mBAAmBS,UAA7C,CAAf;;AAEA,QAAID,iBAAiB,CAAC,CAAtB,EAAyB;AACvB,UAAI1D,SAAQuD,WAAWrE,OAAX,EAAoB;AAC9B8D,gBAAQ,CADsB;AAE9BC,yBAAiBS,YAFa;AAG9BR,0CAH8B;AAI9B9D;AAJ8B,OAApB,CAAZ;AAMAqE,yBAAmBJ,KAAKQ,GAAL,CAAS7D,MAAT,EAAgByD,gBAAhB,CAAnB;AACD;AACF;;AAED;AACAC,iBAAe,CAAC,CAAhB;;AAEA,MAAIK,aAAa,EAAjB;AACA,MAAIC,aAAa,CAAjB;AACA,MAAIC,SAASN,aAAaH,OAA1B;;AAEA,MAAMd,OAAO,KAAMiB,aAAa,CAAhC;;AAEA,OAAK,IAAI9C,KAAI,CAAb,EAAgBA,KAAI8C,UAApB,EAAgC9C,MAAK,CAArC,EAAwC;AACtC;AACA;AACA;AACA,QAAIqD,SAAS,CAAb;AACA,QAAIC,SAASF,MAAb;;AAEA,WAAOC,SAASC,MAAhB,EAAwB;AACtB,UAAMnE,UAAQuD,WAAWrE,OAAX,EAAoB;AAChC8D,gBAAQnC,EADwB;AAEhCoC,yBAAiBC,mBAAmBiB,MAFJ;AAGhCjB,0CAHgC;AAIhC9D;AAJgC,OAApB,CAAd;;AAOA,UAAIY,WAASyD,gBAAb,EAA+B;AAC7BS,iBAASC,MAAT;AACD,OAFD,MAEO;AACLF,iBAASE,MAAT;AACD;;AAEDA,eAASd,KAAKe,KAAL,CAAW,CAACH,SAASC,MAAV,IAAoB,CAApB,GAAwBA,MAAnC,CAAT;AACD;;AAED;AACAD,aAASE,MAAT;;AAEA,QAAI5B,QAAQc,KAAKgB,GAAL,CAAS,CAAT,EAAYnB,mBAAmBiB,MAAnB,GAA4B,CAAxC,CAAZ;AACA,QAAIG,SAAS7E,iBAAiB+D,OAAjB,GAA2BH,KAAKQ,GAAL,CAASX,mBAAmBiB,MAA5B,EAAoCX,OAApC,IAA+CG,UAAvF;;AAEA;AACA,QAAIY,SAASjG,MAAMgG,SAAS,CAAf,CAAb;;AAEAC,WAAOD,SAAS,CAAhB,IAAqB,CAAC,KAAKzD,EAAN,IAAW,CAAhC;;AAEA,SAAK,IAAI2D,IAAIF,MAAb,EAAqBE,KAAKjC,KAA1B,EAAiCiC,KAAK,CAAtC,EAAyC;AACvC,UAAIvB,kBAAkBuB,IAAI,CAA1B;AACA,UAAIC,YAAYzF,gBAAgBc,KAAKmC,MAAL,CAAYgB,eAAZ,CAAhB,CAAhB;;AAEA,UAAIwB,SAAJ,EAAe;AACbb,kBAAUX,eAAV,IAA6B,CAA7B;AACD;;AAED;AACAsB,aAAOC,CAAP,IAAY,CAAED,OAAOC,IAAI,CAAX,KAAiB,CAAlB,GAAuB,CAAxB,IAA6BC,SAAzC;;AAEA;AACA,UAAI5D,OAAM,CAAV,EAAa;AACX0D,eAAOC,CAAP,KAAe,CAACT,WAAWS,IAAI,CAAf,IAAoBT,WAAWS,CAAX,CAArB,KAAuC,CAAxC,GAA6C,CAA9C,GAAmDT,WAAWS,IAAI,CAAf,CAAhE;AACD;;AAED,UAAID,OAAOC,CAAP,IAAY9B,IAAhB,EAAsB;AACpBsB,qBAAaT,WAAWrE,OAAX,EAAoB;AAC/B8D,kBAAQnC,EADuB;AAE/BoC,0CAF+B;AAG/BC,4CAH+B;AAI/B9D;AAJ+B,SAApB,CAAb;;AAOA;AACA;AACA,YAAI4E,cAAcP,gBAAlB,EAAoC;AAClC;AACAA,6BAAmBO,UAAnB;AACAN,yBAAeT,eAAf;;AAEA;AACA,cAAIS,gBAAgBR,gBAApB,EAAsC;AACpC;AACD;;AAED;AACAX,kBAAQc,KAAKgB,GAAL,CAAS,CAAT,EAAY,IAAInB,gBAAJ,GAAuBQ,YAAnC,CAAR;AACD;AACF;AACF;;AAED;AACA,QAAM1D,UAAQuD,WAAWrE,OAAX,EAAoB;AAChC8D,cAAQnC,KAAI,CADoB;AAEhCoC,uBAAiBC,gBAFe;AAGhCA,wCAHgC;AAIhC9D;AAJgC,KAApB,CAAd;;AAOA;;AAEA,QAAIY,UAAQyD,gBAAZ,EAA8B;AAC5B;AACD;;AAEDM,iBAAaQ,MAAb;AACD;;AAED;;AAEA;AACA,SAAO;AACLxE,aAAS2D,gBAAgB,CADpB;AAEL1D,WAAOgE,eAAe,CAAf,GAAmB,KAAnB,GAA2BA,UAF7B;AAGL/D,oBAAgBA,eAAe2D,SAAf,EAA0BlE,kBAA1B;AAHX,GAAP;AAKD,CAvJD,C;;;;;;;;;;;;;;;ACHA,IAAMT,QAAQ,mBAAAH,CAAQ,CAAR,CAAd;AACA,IAAMoB,YAAY,mBAAApB,CAAQ,CAAR,CAAlB;AACA,IAAMP,UAAU,mBAAAO,CAAQ,CAAR,CAAhB;AACA,IAAMsD,cAAc,mBAAAtD,CAAQ,CAAR,CAApB;;IAEM4F,I;AACJ,gBAAatE,IAAb,QA2DG;AAAA,6BAzDDjB,QAyDC;AAAA,QAzDDA,QAyDC,iCAzDU,CAyDV;AAAA,6BAnDDC,QAmDC;AAAA,QAnDDA,QAmDC,iCAnDU,GAmDV;AAAA,8BAhDDC,SAgDC;AAAA,QAhDDA,SAgDC,kCAhDW,GAgDX;AAAA,qCA9CDC,gBA8CC;AAAA,QA9CDA,gBA8CC,yCA9CkB,EA8ClB;AAAA,kCA5CDqF,aA4CC;AAAA,QA5CDA,aA4CC,sCA5Ce,KA4Cf;AAAA,mCA1CDnF,cA0CC;AAAA,QA1CDA,cA0CC,uCA1CgB,KA0ChB;AAAA,mCAvCDC,cAuCC;AAAA,QAvCDA,cAuCC,uCAvCgB,KAuChB;AAAA,qCArCDC,kBAqCC;AAAA,QArCDA,kBAqCC,yCArCoB,CAqCpB;AAAA,uBAlCDkF,EAkCC;AAAA,QAlCDA,EAkCC,2BAlCI,IAkCJ;AAAA,yBAhCDC,IAgCC;AAAA,QAhCDA,IAgCC,6BAhCM,EAgCN;AAAA,+BA9BDC,UA8BC;AAAA,QA9BDA,UA8BC,mCA9BY,IA8BZ;AAAA,0BA3BDC,KA2BC;AAAA,QA3BDA,KA2BC,8BA3BO7E,SA2BP;AAAA,2BAzBD8E,MAyBC;AAAA,QAzBDA,MAyBC,+BAzBQ,UAACC,CAAD,EAAIC,CAAJ;AAAA,aAAWD,EAAEjF,KAAF,GAAUkF,EAAElF,KAAvB;AAAA,KAyBR;AAAA,6BArBDmF,QAqBC;AAAA,QArBDA,QAqBC,iCArBU,KAqBV;AAAA,mCAlBDC,cAkBC;AAAA,QAlBDA,cAkBC,uCAlBgB,KAkBhB;AAAA,mCAhBDC,cAgBC;AAAA,QAhBDA,cAgBC,uCAhBgB,KAgBhB;AAAA,iCAfDC,YAeC;AAAA,QAfDA,YAeC,qCAfc,KAed;AAAA,8BAbDjE,SAaC;AAAA,QAbDA,SAaC,kCAbW;AACVc,eAAS,KADC;AAEVT,WAAKd;AAFK,KAaX;AAAA,8BARDM,SAQC;AAAA,QARDA,SAQC,kCARW;AACViB,eAAS,KADC;AAEVlB,cAAQ,KAFE;AAGVE,cAAQ;AAHE,KAQX;AAAA,4BADDoE,OACC;AAAA,QADDA,OACC,gCADS,KACT;;AAAA;;AACD,SAAK5F,OAAL,GAAe;AACbR,wBADa;AAEbC,wBAFa;AAGbC,0BAHa;AAIbC,wCAJa;AAKbC,uBAAiBoF,aALJ;AAMbnF,oCANa;AAObC,oCAPa;AAQbC,4CARa;AASbkF,YATa;AAUbC,gBAVa;AAWbQ,oCAXa;AAYbC,gCAZa;AAabR,4BAba;AAcbC,kBAda;AAebC,oBAfa;AAgBbO,sBAhBa;AAiBbJ,wBAjBa;AAkBbC,oCAlBa;AAmBb/D,0BAnBa;AAoBbH;AApBa,KAAf;;AAuBA,SAAKsE,aAAL,CAAmBpF,IAAnB;AACD;;;;kCAEcA,I,EAAM;AACnB,WAAKA,IAAL,GAAYA,IAAZ;AACA,aAAOA,IAAP;AACD;;;2BAEOlB,O,EAAS;AACf,WAAKuG,IAAL,kCAAyCvG,OAAzC;;AADe,+BAMX,KAAKwG,iBAAL,CAAuBxG,OAAvB,CANW;AAAA,UAIbyG,cAJa,sBAIbA,cAJa;AAAA,UAKbC,YALa,sBAKbA,YALa;;AAAA,qBAQY,KAAKC,OAAL,CAAaF,cAAb,EAA6BC,YAA7B,CARZ;AAAA,UAQTE,OARS,YAQTA,OARS;AAAA,UAQAC,OARA,YAQAA,OARA;;AAUf,WAAKC,aAAL,CAAmBF,OAAnB,EAA4BC,OAA5B;;AAEA,UAAI,KAAKpG,OAAL,CAAamF,UAAjB,EAA6B;AAC3B,aAAKmB,KAAL,CAAWF,OAAX;AACD;;AAED,aAAO,KAAKG,OAAL,CAAaH,OAAb,CAAP;AACD;;;wCAEgC;AAAA,UAAd7G,OAAc,uEAAJ,EAAI;;AAC/B,UAAMyG,iBAAiB,EAAvB;;AAEA,UAAI,KAAKhG,OAAL,CAAawF,QAAjB,EAA2B;AACzB;AACA,YAAMgB,SAASjH,QAAQkH,KAAR,CAAc,KAAKzG,OAAL,CAAaH,cAA3B,CAAf;AACA,aAAK,IAAIqB,IAAI,CAAR,EAAWC,MAAMqF,OAAOtG,MAA7B,EAAqCgB,IAAIC,GAAzC,EAA8CD,KAAK,CAAnD,EAAsD;AACpD8E,yBAAetF,IAAf,CAAoB,IAAIpB,KAAJ,CAAUkH,OAAOtF,CAAP,CAAV,EAAqB,KAAKlB,OAA1B,CAApB;AACD;AACF;;AAED,UAAIiG,eAAe,IAAI3G,KAAJ,CAAUC,OAAV,EAAmB,KAAKS,OAAxB,CAAnB;;AAEA,aAAO,EAAEgG,8BAAF,EAAkBC,0BAAlB,EAAP;AACD;;;8BAE2C;AAAA,UAAnCD,cAAmC,uEAAlB,EAAkB;AAAA,UAAdC,YAAc;;AAC1C,UAAMxF,OAAO,KAAKA,IAAlB;AACA,UAAMiG,YAAY,EAAlB;AACA,UAAMN,UAAU,EAAhB;;AAEA;AACA;AACA,UAAI,OAAO3F,KAAK,CAAL,CAAP,KAAmB,QAAvB,EAAiC;AAC/B;AACA,aAAK,IAAIS,IAAI,CAAR,EAAWC,MAAMV,KAAKP,MAA3B,EAAmCgB,IAAIC,GAAvC,EAA4CD,KAAK,CAAjD,EAAoD;AAClD,eAAKyF,QAAL,CAAc;AACZ5E,iBAAK,EADO;AAEZf,mBAAOP,KAAKS,CAAL,CAFK;AAGZ0F,oBAAQ1F,CAHI;AAIZ2F,mBAAO3F;AAJK,WAAd,EAKG;AACDwF,gCADC;AAEDN,4BAFC;AAGDJ,0CAHC;AAIDC;AAJC,WALH;AAWD;;AAED,eAAO,EAAEE,SAAS,IAAX,EAAiBC,gBAAjB,EAAP;AACD;;AAED;AACA;AACA,UAAMD,UAAU,EAAhB;AACA,WAAK,IAAIjF,KAAI,CAAR,EAAWC,OAAMV,KAAKP,MAA3B,EAAmCgB,KAAIC,IAAvC,EAA4CD,MAAK,CAAjD,EAAoD;AAClD,YAAIW,OAAOpB,KAAKS,EAAL,CAAX;AACA;AACA,aAAK,IAAI2D,IAAI,CAAR,EAAWiC,UAAU,KAAK9G,OAAL,CAAakF,IAAb,CAAkBhF,MAA5C,EAAoD2E,IAAIiC,OAAxD,EAAiEjC,KAAK,CAAtE,EAAyE;AACvE,cAAI9C,MAAM,KAAK/B,OAAL,CAAakF,IAAb,CAAkBL,CAAlB,CAAV;AACA,cAAI,OAAO9C,GAAP,KAAe,QAAnB,EAA6B;AAC3BoE,oBAAQpE,IAAIgF,IAAZ,IAAoB;AAClBC,sBAAS,IAAIjF,IAAIiF,MAAT,IAAoB;AADV,aAApB;AAGA,gBAAIjF,IAAIiF,MAAJ,IAAc,CAAd,IAAmBjF,IAAIiF,MAAJ,GAAa,CAApC,EAAuC;AACrC,oBAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACD;AACDlF,kBAAMA,IAAIgF,IAAV;AACD,WARD,MAQO;AACLZ,oBAAQpE,GAAR,IAAe;AACbiF,sBAAQ;AADK,aAAf;AAGD;;AAED,eAAKL,QAAL,CAAc;AACZ5E,oBADY;AAEZf,mBAAO,KAAKhB,OAAL,CAAaoF,KAAb,CAAmBvD,IAAnB,EAAyBE,GAAzB,CAFK;AAGZ6E,oBAAQ/E,IAHI;AAIZgF,mBAAO3F;AAJK,WAAd,EAKG;AACDwF,gCADC;AAEDN,4BAFC;AAGDJ,0CAHC;AAIDC;AAJC,WALH;AAWD;;AAED,YAAI,KAAKjG,OAAL,CAAa0B,SAAb,CAAuBc,OAAvB,IACA5D,QAAQiD,KAAK,KAAK7B,OAAL,CAAa0B,SAAb,CAAuBK,GAA5B,CAAR,CADA,IAEAF,KAAK,KAAK7B,OAAL,CAAa0B,SAAb,CAAuBK,GAA5B,EAAiC7B,MAAjC,GAA0C,CAF9C,EAGC;AACC,cAAMgH,WAAW,KAAKhB,OAAL,CAAarE,KAAK,KAAK7B,OAAL,CAAa0B,SAAb,CAAuBK,GAA5B,CAAb,EAA+CiE,cAA/C,EAA+DC,YAA/D,CAAjB;AACA,cAAIS,UAAUxF,EAAV,CAAJ,EAAkB;AAChB,gBAAMc,SAASnD,OAAOsI,MAAP,CAAc,EAAd,EAAkBT,UAAUxF,EAAV,CAAlB,EAAgC;AAC7CW,oBAAMhD,OAAOsI,MAAP,CAAc,EAAd,EAAkBT,UAAUxF,EAAV,EAAaW,IAA/B,sBACH,KAAK7B,OAAL,CAAa0B,SAAb,CAAuBK,GADpB,EAC0BmF,QAD1B;AADuC,aAAhC,CAAf;AAKA,gBAAME,MAAMhB,QAAQxF,OAAR,CAAgB8F,UAAUxF,EAAV,CAAhB,CAAZ;AACAwF,sBAAUxF,EAAV,IAAec,MAAf;AACAoE,oBAAQgB,GAAR,IAAepF,MAAf;AACD,WATD,MASO,IAAIkF,SAAShH,MAAb,EAAqB;AAC1BwG,sBAAUxF,EAAV,IAAe;AACbW,oBAAMhD,OAAOsI,MAAP,CAAc,EAAd,EAAkBtF,IAAlB,sBACH,KAAK7B,OAAL,CAAa0B,SAAb,CAAuBK,GADpB,EAC0BmF,QAD1B,EADO;AAIbG,sBAAQ;AAJK,aAAf;AAMAjB,oBAAQ1F,IAAR,CAAagG,UAAUxF,EAAV,CAAb;AACD;AACF;AACF;;AAED,aAAO,EAAEiF,gBAAF,EAAWC,gBAAX,EAAP;AACD;;;2CAEmI;AAAA,UAAxHrE,GAAwH,SAAxHA,GAAwH;AAAA,mCAAnHuF,UAAmH;AAAA,UAAnHA,UAAmH,oCAAtG,CAAC,CAAqG;AAAA,UAAlGtG,KAAkG,SAAlGA,KAAkG;AAAA,UAA3F4F,MAA2F,SAA3FA,MAA2F;AAAA,UAAnFC,KAAmF,SAAnFA,KAAmF;AAAA,uCAAxEb,cAAwE;AAAA,UAAxEA,cAAwE,wCAAvD,EAAuD;AAAA,qCAAnDC,YAAmD;AAAA,UAAnDA,YAAmD,sCAApC,EAAoC;AAAA,kCAAhCS,SAAgC;AAAA,UAAhCA,SAAgC,mCAApB,EAAoB;AAAA,gCAAhBN,OAAgB;AAAA,UAAhBA,OAAgB,iCAAN,EAAM;;AAClI;AACA,UAAIpF,UAAUC,SAAV,IAAuBD,UAAU,IAArC,EAA2C;AACzC;AACD;;AAED,UAAIuG,SAAS,KAAb;AACA,UAAIC,eAAe,CAAC,CAApB;AACA,UAAIC,iBAAiB,CAArB;;AAEA,UAAI,OAAOzG,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAK8E,IAAL,cAAoB/D,QAAQ,EAAR,GAAa,GAAb,GAAmBA,GAAvC;;AAEA,YAAI2F,mBAAmBzB,aAAa0B,MAAb,CAAoB3G,KAApB,CAAvB;AACA,aAAK8E,IAAL,kBAAyB9E,KAAzB,kBAA2C0G,iBAAiBrH,KAA5D;;AAEA,YAAI,KAAKL,OAAL,CAAawF,QAAjB,EAA2B;AACzB,cAAIoC,QAAQ5G,MAAMyF,KAAN,CAAY,KAAKzG,OAAL,CAAaH,cAAzB,CAAZ;AACA,cAAIgI,SAAS,EAAb;;AAEA,eAAK,IAAI3G,IAAI,CAAb,EAAgBA,IAAI8E,eAAe9F,MAAnC,EAA2CgB,KAAK,CAAhD,EAAmD;AACjD,gBAAI4G,gBAAgB9B,eAAe9E,CAAf,CAApB;;AAEA,iBAAK4E,IAAL,kBAAyBgC,cAAcvI,OAAvC;;AAEA;AACA,gBAAIwI,iBAAiB,KAArB;;AAEA,iBAAK,IAAIlD,IAAI,CAAb,EAAgBA,IAAI+C,MAAM1H,MAA1B,EAAkC2E,KAAK,CAAvC,EAA0C;AACxC,kBAAImD,OAAOJ,MAAM/C,CAAN,CAAX;AACA,kBAAIoD,oBAAoBH,cAAcH,MAAd,CAAqBK,IAArB,CAAxB;AACA,kBAAI/I,MAAM,EAAV;AACA,kBAAIgJ,kBAAkB7H,OAAtB,EAA+B;AAC7BnB,oBAAI+I,IAAJ,IAAYC,kBAAkB5H,KAA9B;AACAkH,yBAAS,IAAT;AACAQ,iCAAiB,IAAjB;AACAF,uBAAOnH,IAAP,CAAYuH,kBAAkB5H,KAA9B;AACD,eALD,MAKO;AACLpB,oBAAI+I,IAAJ,IAAY,CAAZ;AACA,oBAAI,CAAC,KAAKhI,OAAL,CAAayF,cAAlB,EAAkC;AAChCoC,yBAAOnH,IAAP,CAAY,CAAZ;AACD;AACF;AACD,mBAAKoF,IAAL,cAAqBkC,IAArB,kBAAsC/I,IAAI+I,IAAJ,CAAtC;AACA;AACD;;AAED,gBAAID,cAAJ,EAAoB;AAClBN,gCAAkB,CAAlB;AACD;AACF;;AAEDD,yBAAeK,OAAO,CAAP,CAAf;AACA,cAAIK,YAAYL,OAAO3H,MAAvB;AACA,eAAK,IAAIgB,MAAI,CAAb,EAAgBA,MAAIgH,SAApB,EAA+BhH,OAAK,CAApC,EAAuC;AACrCsG,4BAAgBK,OAAO3G,GAAP,CAAhB;AACD;AACDsG,yBAAeA,eAAeU,SAA9B;;AAEA,eAAKpC,IAAL,CAAU,sBAAV,EAAkC0B,YAAlC;AACD;;AAED,YAAInD,aAAaqD,iBAAiBrH,KAAlC;AACA,YAAImH,eAAe,CAAC,CAApB,EAAuB;AACrBnD,uBAAa,CAACA,aAAamD,YAAd,IAA8B,CAA3C;AACD;;AAED,aAAK1B,IAAL,CAAU,gBAAV,EAA4BzB,UAA5B;;AAEA,YAAI8D,mBAAoB,KAAKnI,OAAL,CAAawF,QAAb,IAAyB,KAAKxF,OAAL,CAAayF,cAAvC,GAAyDgC,kBAAkBzB,eAAe9F,MAA1F,GAAmG,IAA1H;;AAEA,aAAK4F,IAAL,uBAA8BqC,gBAA9B;;AAEA;AACA,YAAI,CAACZ,UAAUG,iBAAiBtH,OAA5B,KAAwC+H,gBAA5C,EAA8D;AAC5D;AACA,cAAIC,iBAAiB1B,UAAUG,KAAV,CAArB;AACA,cAAIuB,cAAJ,EAAoB;AAClB;AACA;AACAA,2BAAef,MAAf,CAAsB3G,IAAtB,CAA2B;AACzBqB,sBADyB;AAEzBuF,oCAFyB;AAGzBtG,0BAHyB;AAIzBX,qBAAOgE,UAJkB;AAKzB/D,8BAAgBoH,iBAAiBpH;AALR,aAA3B;AAOD,WAVD,MAUO;AACL;AACAoG,sBAAUG,KAAV,IAAmB;AACjBhF,oBAAM+E,MADW;AAEjBS,sBAAQ,CAAC;AACPtF,wBADO;AAEPuF,sCAFO;AAGPtG,4BAHO;AAIPX,uBAAOgE,UAJA;AAKP/D,gCAAgBoH,iBAAiBpH;AAL1B,eAAD;AAFS,aAAnB;;AAWA8F,oBAAQ1F,IAAR,CAAagG,UAAUG,KAAV,CAAb;AACD;AACF;AACF,OA7FD,MA6FO,IAAIjI,QAAQoC,KAAR,CAAJ,EAAoB;AACzB,aAAK,IAAIE,MAAI,CAAR,EAAWC,MAAMH,MAAMd,MAA5B,EAAoCgB,MAAIC,GAAxC,EAA6CD,OAAK,CAAlD,EAAqD;AACnD,eAAKyF,QAAL,CAAc;AACZ5E,oBADY;AAEZuF,wBAAYpG,GAFA;AAGZF,mBAAOA,MAAME,GAAN,CAHK;AAIZ0F,0BAJY;AAKZC;AALY,WAAd,EAMG;AACDH,gCADC;AAEDN,4BAFC;AAGDJ,0CAHC;AAIDC;AAJC,WANH;AAYD;AACF;AACF;;;kCAEcE,O,EAASC,O,EAAS;AAC/B,WAAKN,IAAL,CAAU,wBAAV;;AAEA,WAAK,IAAI5E,IAAI,CAAR,EAAWC,MAAMiF,QAAQlG,MAA9B,EAAsCgB,IAAIC,GAA1C,EAA+CD,KAAK,CAApD,EAAuD;AACrD,YAAMmG,SAASjB,QAAQlF,CAAR,EAAWmG,MAA1B;AACA,YAAMgB,WAAWhB,OAAOnH,MAAxB;;AAEA,YAAIoI,YAAY,CAAhB;AACA,YAAIC,YAAY,CAAhB;;AAEA,aAAK,IAAI1D,IAAI,CAAb,EAAgBA,IAAIwD,QAApB,EAA8BxD,KAAK,CAAnC,EAAsC;AACpC,cAAImC,SAASb,UAAUA,QAAQkB,OAAOxC,CAAP,EAAU9C,GAAlB,EAAuBiF,MAAjC,GAA0C,CAAvD;AACA,cAAI3G,QAAQ2G,WAAW,CAAX,GAAeK,OAAOxC,CAAP,EAAUxE,KAAzB,GAAkCgH,OAAOxC,CAAP,EAAUxE,KAAV,IAAmB,KAAjE;AACA,cAAImI,SAASnI,QAAQ2G,MAArB;;AAEA,cAAIA,WAAW,CAAf,EAAkB;AAChBuB,wBAAY7E,KAAKQ,GAAL,CAASqE,SAAT,EAAoBC,MAApB,CAAZ;AACD,WAFD,MAEO;AACLnB,mBAAOxC,CAAP,EAAU2D,MAAV,GAAmBA,MAAnB;AACAF,yBAAaE,MAAb;AACD;AACF;;AAEDpC,gBAAQlF,CAAR,EAAWb,KAAX,GAAmBkI,cAAc,CAAd,GAAkBD,SAAlB,GAA8BC,SAAjD;;AAEA,aAAKzC,IAAL,CAAUM,QAAQlF,CAAR,CAAV;AACD;AACF;;;0BAEMkF,O,EAAS;AACd,WAAKN,IAAL,CAAU,iBAAV;AACAM,cAAQqC,IAAR,CAAa,KAAKzI,OAAL,CAAaqF,MAA1B;AACD;;;4BAEQe,O,EAAS;AAAA;;AAChB,UAAMsC,cAAc,EAApB;;AAEA,UAAI,KAAK1I,OAAL,CAAa4F,OAAjB,EAA0B;AACxB,aAAKE,IAAL,CAAU,iBAAV,EAA6B6C,KAAKC,SAAL,CAAexC,OAAf,CAA7B;AACD;;AAED,UAAIyC,eAAe,EAAnB;;AAEA,UAAI,KAAK7I,OAAL,CAAa0F,cAAjB,EAAiC;AAC/BmD,qBAAanI,IAAb,CAAkB,UAACsB,MAAD,EAAS8G,IAAT,EAAkB;AAClC,cAAMzB,SAASrF,OAAOqF,MAAtB;AACAyB,eAAKnH,OAAL,GAAe,EAAf;;AAEA,eAAK,IAAIT,IAAI,CAAR,EAAWC,MAAMkG,OAAOnH,MAA7B,EAAqCgB,IAAIC,GAAzC,EAA8CD,KAAK,CAAnD,EAAsD;AACpD,gBAAIW,OAAOwF,OAAOnG,CAAP,CAAX;;AAEA,gBAAIW,KAAKvB,cAAL,CAAoBJ,MAApB,KAA+B,CAAnC,EAAsC;AACpC;AACD;;AAED,gBAAIjB,MAAM;AACRiD,uBAASL,KAAKvB,cADN;AAERU,qBAAOa,KAAKb;AAFJ,aAAV;AAIA,gBAAIa,KAAKE,GAAT,EAAc;AACZ9C,kBAAI8C,GAAJ,GAAUF,KAAKE,GAAf;AACD;AACD,gBAAIF,KAAKkH,cAAL,CAAoB,YAApB,KAAqClH,KAAKyF,UAAL,GAAkB,CAAC,CAA5D,EAA+D;AAC7DrI,kBAAIqI,UAAJ,GAAiBzF,KAAKyF,UAAtB;AACD;AACDwB,iBAAKnH,OAAL,CAAajB,IAAb,CAAkBzB,GAAlB;AACD;AACF,SAvBD;AAwBD;;AAED,UAAI,KAAKe,OAAL,CAAa2F,YAAjB,EAA+B;AAC7BkD,qBAAanI,IAAb,CAAkB,UAACsB,MAAD,EAAS8G,IAAT,EAAkB;AAClCA,eAAKzI,KAAL,GAAa2B,OAAO3B,KAApB;AACD,SAFD;AAGD;;AAED,WAAK,IAAIa,IAAI,CAAR,EAAWC,MAAMiF,QAAQlG,MAA9B,EAAsCgB,IAAIC,GAA1C,EAA+CD,KAAK,CAApD,EAAuD;AACrD,YAAMc,SAASoE,QAAQlF,CAAR,CAAf;;AAEA,YAAI,KAAKlB,OAAL,CAAaiF,EAAjB,EAAqB;AACnBjD,iBAAOH,IAAP,GAAc,KAAK7B,OAAL,CAAaoF,KAAb,CAAmBpD,OAAOH,IAA1B,EAAgC,KAAK7B,OAAL,CAAaiF,EAA7C,EAAiD,CAAjD,CAAd;AACD;;AAED,YAAI,CAAC4D,aAAa3I,MAAlB,EAA0B;AACxBwI,sBAAYhI,IAAZ,CAAiBsB,OAAOH,IAAxB;AACA;AACD;;AAED,YAAMiH,OAAO;AACXjH,gBAAMG,OAAOH;AADF,SAAb;;AAIA,aAAK,IAAIgD,IAAI,CAAR,EAAW1D,QAAM0H,aAAa3I,MAAnC,EAA2C2E,IAAI1D,KAA/C,EAAoD0D,KAAK,CAAzD,EAA4D;AAC1DgE,uBAAahE,CAAb,EAAgB7C,MAAhB,EAAwB8G,IAAxB;AACD;;AAEDJ,oBAAYhI,IAAZ,CAAiBoI,IAAjB;AACD;;AAED,UAAI,KAAK9I,OAAL,CAAa0F,cAAb,IAA+B,KAAK1F,OAAL,CAAauB,SAA5C,IAAyD,KAAKvB,OAAL,CAAauB,SAAb,CAAuBiB,OAApF,EAA4F;AAC1FkG,oBAAY9G,OAAZ,CAAoB,gBAAQ;AAC1Ba,sBAAYZ,IAAZ,EAAkB,MAAK7B,OAAvB;AACD,SAFD;AAGD;;AAED,aAAO0I,WAAP;AACD;;;2BAEO;AACN,UAAI,KAAK1I,OAAL,CAAa4F,OAAjB,EAA0B;AAAA;;AACxB,6BAAQoD,GAAR,iBAAeC,SAAf;AACD;AACF;;;;;;AAGHxK,OAAOC,OAAP,GAAiBqG,IAAjB,C","file":"fuse.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Fuse\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Fuse\"] = factory();\n\telse\n\t\troot[\"Fuse\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 63457fcab3016f2ead56","module.exports = obj => !Array.isArray ? Object.prototype.toString.call(obj) === '[object Array]' : Array.isArray(obj)\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/is_array.js","const bitapRegexSearch = require('./bitap_regex_search')\nconst bitapSearch = require('./bitap_search')\nconst patternAlphabet = require('./bitap_pattern_alphabet')\n\nclass Bitap {\n  constructor (pattern, {\n    // Approximately where in the text is the pattern expected to be found?\n    location = 0,\n    // Determines how close the match must be to the fuzzy location (specified above).\n    // An exact letter match which is 'distance' characters away from the fuzzy location\n    // would score as a complete mismatch. A distance of '0' requires the match be at\n    // the exact location specified, a threshold of '1000' would require a perfect match\n    // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n    distance = 100,\n    // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n    // (of both letters and location), a threshold of '1.0' would match anything.\n    threshold = 0.6,\n    // Machine word size\n    maxPatternLength = 32,\n    // Indicates whether comparisons should be case sensitive.\n    isCaseSensitive = false,\n    // Regex used to separate words when searching. Only applicable when `tokenize` is `true`.\n    tokenSeparator = / +/g,\n    // When true, the algorithm continues searching to the end of the input even if a perfect\n    // match is found before the end of the same input.\n    findAllMatches = false,\n    // Minimum number of characters that must be matched before a result is considered a match\n    minMatchCharLength = 1\n  }) {\n    this.options = {\n      location,\n      distance,\n      threshold,\n      maxPatternLength,\n      isCaseSensitive,\n      tokenSeparator,\n      findAllMatches,\n      minMatchCharLength\n    }\n\n    this.pattern = this.options.isCaseSensitive ? pattern : pattern.toLowerCase()\n\n    if (this.pattern.length <= maxPatternLength) {\n      this.patternAlphabet = patternAlphabet(this.pattern)\n    }\n  }\n\n  search (text) {\n    if (!this.options.isCaseSensitive) {\n      text = text.toLowerCase()\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      return {\n        isMatch: true,\n        score: 0,\n        matchedIndices: [[0, text.length - 1]]\n      }\n    }\n\n    // When pattern length is greater than the machine word length, just do a a regex comparison\n    const { maxPatternLength, tokenSeparator } = this.options\n    if (this.pattern.length > maxPatternLength) {\n      return bitapRegexSearch(text, this.pattern, tokenSeparator)\n    }\n\n    // Otherwise, use Bitap algorithm\n    const { location, distance, threshold, findAllMatches, minMatchCharLength } = this.options\n    return bitapSearch(text, this.pattern, this.patternAlphabet, {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength\n    })\n  }\n}\n\n// let x = new Bitap(\"od mn war\", {})\n// let result = x.search(\"Old Man's War\")\n// console.log(result)\n\nmodule.exports = Bitap\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/index.js","const isArray = require('./is_array')\n\nconst deepValue = (obj, path, list) => {\n  if (!path) {\n    // If there's no path left, we've gotten to the object we care about.\n    list.push(obj)\n  } else {\n    const dotIndex = path.indexOf('.')\n    let firstSegment = path\n    let remaining = null\n\n    if (dotIndex !== -1) {\n      firstSegment = path.slice(0, dotIndex)\n      remaining = path.slice(dotIndex + 1)\n    }\n\n    const value = obj[firstSegment]\n\n    if (value !== null && value !== undefined) {\n      if (!remaining && (typeof value === 'string' || typeof value === 'number')) {\n        list.push(value.toString())\n      } else if (isArray(value)) {\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepValue(value[i], remaining, list)\n        }\n      } else if (remaining) {\n        // An object. Recurse further.\n        deepValue(value, remaining, list)\n      }\n    }\n  }\n\n  return list\n}\n\nmodule.exports = (obj, path) => {\n  return deepValue(obj, path, [])\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/deep_value.js","module.exports = function(resultItem, objOptions) {\n  const prefix = objOptions.highlight.prefix || '<b>';\n  const suffix = objOptions.highlight.suffix || '</b>';\n  const recursiveOpt = objOptions.recursive;\n\n  resultItem.matches.forEach(matchItem => {\n    var text = resultItem.item[matchItem.key];\n    var result = [];\n    var matches = [].concat(matchItem.indices); // limpar referencia\n    var pair = matches.shift();\n\n    for (var i = 0; i < text.length; i++) {\n      var char = text.charAt(i);\n      if (pair && i == pair[0]) {\n        result.push(prefix);\n      }\n      result.push(char);\n      if (pair && i == pair[1]) {\n        result.push(suffix);\n        pair = matches.shift();\n      }\n    }\n    resultItem.highlight = result.join('');\n\n    if (\n      recursiveOpt.enabled &&\n      recursiveOpt.key &&\n      resultItem[recursiveOpt.key] &&\n      resultItem[recursiveOpt.key].length > 0\n    ) {\n      resultItem[recursiveOpt.key].forEach(child => {\n        highlighter(child);\n      });\n    }\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/helpers/highlighter.js","module.exports = (matchmask = [], minMatchCharLength = 1) => {\n  let matchedIndices = []\n  let start = -1\n  let end = -1\n  let i = 0\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i]\n    if (match && start === -1) {\n      start = i\n    } else if (!match && start !== -1) {\n      end = i - 1\n      if ((end - start) + 1 >= minMatchCharLength) {\n        matchedIndices.push([start, end])\n      }\n      start = -1\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && (i - start) >= minMatchCharLength) {\n    matchedIndices.push([start, i - 1])\n  }\n\n  return matchedIndices\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_matched_indices.js","module.exports = (pattern) => {\n  let mask = {}\n  let len = pattern.length\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] = 0\n  }\n\n  for (let i = 0; i < len; i += 1) {\n    mask[pattern.charAt(i)] |= 1 << (len - i - 1)\n  }\n\n  return mask\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_pattern_alphabet.js","const SPECIAL_CHARS_REGEX = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g\n\nmodule.exports = (text, pattern, tokenSeparator = / +/g) => {\n  let regex = new RegExp(pattern.replace(SPECIAL_CHARS_REGEX, '\\\\$&').replace(tokenSeparator, '|'))\n  let matches = text.match(regex)\n  let isMatch = !!matches\n  let matchedIndices = []\n\n  if (isMatch) {\n    for (let i = 0, matchesLen = matches.length; i < matchesLen; i += 1) {\n      let match = matches[i]\n      matchedIndices.push([text.indexOf(match), match.length - 1])\n    }\n  }\n\n  return {\n    // TODO: revisit this score\n    score: isMatch ? 0.5 : 1,\n    isMatch,\n    matchedIndices\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_regex_search.js","module.exports = (pattern, { errors = 0, currentLocation = 0, expectedLocation = 0, distance = 100 }) => {\n  const accuracy = errors / pattern.length\n  const proximity = Math.abs(expectedLocation - currentLocation)\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + (proximity / distance)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_score.js","const bitapScore = require('./bitap_score')\nconst matchedIndices = require('./bitap_matched_indices')\n\nmodule.exports = (text, pattern, patternAlphabet, { location = 0, distance = 100, threshold = 0.6, findAllMatches = false, minMatchCharLength = 1 }) => {\n  const expectedLocation = location\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = text.indexOf(pattern, expectedLocation)\n\n  const patternLen = pattern.length\n\n  // a mask of the matches\n  const matchMask = []\n  for (let i = 0; i < textLen; i += 1) {\n    matchMask[i] = 0\n  }\n\n  if (bestLocation !== -1) {\n    let score = bitapScore(pattern, {\n      errors: 0,\n      currentLocation: bestLocation,\n      expectedLocation,\n      distance\n    })\n    currentThreshold = Math.min(score, currentThreshold)\n\n    // What about in the other direction? (speed up)\n    bestLocation = text.lastIndexOf(pattern, expectedLocation + patternLen)\n\n    if (bestLocation !== -1) {\n      let score = bitapScore(pattern, {\n        errors: 0,\n        currentLocation: bestLocation,\n        expectedLocation,\n        distance\n      })\n      currentThreshold = Math.min(score, currentThreshold)\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1\n\n  let lastBitArr = []\n  let finalScore = 1\n  let binMax = patternLen + textLen\n\n  const mask = 1 << (patternLen - 1)\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0\n    let binMid = binMax\n\n    while (binMin < binMid) {\n      const score = bitapScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance\n      })\n\n      if (score <= currentThreshold) {\n        binMin = binMid\n      } else {\n        binMax = binMid\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin)\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid\n\n    let start = Math.max(1, expectedLocation - binMid + 1)\n    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2)\n\n    bitArr[finish + 1] = (1 << i) - 1\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1\n      let charMatch = patternAlphabet[text.charAt(currentLocation)]\n\n      if (charMatch) {\n        matchMask[currentLocation] = 1\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch\n\n      // Subsequent passes: fuzzy match\n      if (i !== 0) {\n        bitArr[j] |= (((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1) | lastBitArr[j + 1]\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = bitapScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance\n        })\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore\n          bestLocation = currentLocation\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation)\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = bitapScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance\n    })\n\n    // console.log('score', score, finalScore)\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr\n  }\n\n  // console.log('FINAL SCORE', finalScore)\n\n  // Count exact matches (those with a score of 0) to be \"almost\" exact\n  return {\n    isMatch: bestLocation >= 0,\n    score: finalScore === 0 ? 0.001 : finalScore,\n    matchedIndices: matchedIndices(matchMask, minMatchCharLength)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bitap/bitap_search.js","const Bitap = require('./bitap')\nconst deepValue = require('./helpers/deep_value')\nconst isArray = require('./helpers/is_array')\nconst highlighter = require('./helpers/highlighter')\n\nclass Fuse {\n  constructor (list, {\n    // Approximately where in the text is the pattern expected to be found?\n    location = 0,\n    // Determines how close the match must be to the fuzzy location (specified above).\n    // An exact letter match which is 'distance' characters away from the fuzzy location\n    // would score as a complete mismatch. A distance of '0' requires the match be at\n    // the exact location specified, a threshold of '1000' would require a perfect match\n    // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n    distance = 100,\n    // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n    // (of both letters and location), a threshold of '1.0' would match anything.\n    threshold = 0.6,\n    // Machine word size\n    maxPatternLength = 32,\n    // Indicates whether comparisons should be case sensitive.\n    caseSensitive = false,\n    // Regex used to separate words when searching. Only applicable when `tokenize` is `true`.\n    tokenSeparator = / +/g,\n    // When true, the algorithm continues searching to the end of the input even if a perfect\n    // match is found before the end of the same input.\n    findAllMatches = false,\n    // Minimum number of characters that must be matched before a result is considered a match\n    minMatchCharLength = 1,\n    // The name of the identifier property. If specified, the returned result will be a list\n    // of the items' dentifiers, otherwise it will be a list of the items.\n    id = null,\n    // List of properties that will be searched. This also supports nested properties.\n    keys = [],\n    // Whether to sort the result list, by score\n    shouldSort = true,\n    // The get function to use when fetching an object's properties.\n    // The default will search nested paths *ie foo.bar.baz*\n    getFn = deepValue,\n    // Default sort function\n    sortFn = (a, b) => (a.score - b.score),\n    // When true, the search algorithm will search individual words **and** the full string,\n    // computing the final score as a function of both. Note that when `tokenize` is `true`,\n    // the `threshold`, `distance`, and `location` are inconsequential for individual tokens.\n    tokenize = false,\n    // When true, the result set will only include records that match all tokens. Will only work\n    // if `tokenize` is also true.\n    matchAllTokens = false,\n\n    includeMatches = false,\n    includeScore = false,\n\n    recursive = {\n      enabled: false,\n      key: undefined\n    },\n\n    highlight = {\n      enabled: false,\n      prefix: '<b>',\n      suffix: '</b>',\n    },\n\n    // Will print to the console. Useful for debugging.\n    verbose = false\n  }) {\n    this.options = {\n      location,\n      distance,\n      threshold,\n      maxPatternLength,\n      isCaseSensitive: caseSensitive,\n      tokenSeparator,\n      findAllMatches,\n      minMatchCharLength,\n      id,\n      keys,\n      includeMatches,\n      includeScore,\n      shouldSort,\n      getFn,\n      sortFn,\n      verbose,\n      tokenize,\n      matchAllTokens,\n      recursive,\n      highlight\n    }\n\n    this.setCollection(list)\n  }\n\n  setCollection (list) {\n    this.list = list\n    return list\n  }\n\n  search (pattern) {\n    this._log(`---------\\nSearch pattern: \"${pattern}\"`)\n\n    const {\n      tokenSearchers,\n      fullSearcher\n    } = this._prepareSearchers(pattern)\n\n    let { weights, results } = this._search(tokenSearchers, fullSearcher)\n\n    this._computeScore(weights, results)\n\n    if (this.options.shouldSort) {\n      this._sort(results)\n    }\n\n    return this._format(results)\n  }\n\n  _prepareSearchers (pattern = '') {\n    const tokenSearchers = []\n\n    if (this.options.tokenize) {\n      // Tokenize on the separator\n      const tokens = pattern.split(this.options.tokenSeparator)\n      for (let i = 0, len = tokens.length; i < len; i += 1) {\n        tokenSearchers.push(new Bitap(tokens[i], this.options))\n      }\n    }\n\n    let fullSearcher = new Bitap(pattern, this.options)\n\n    return { tokenSearchers, fullSearcher }\n  }\n\n  _search (tokenSearchers = [], fullSearcher) {\n    const list = this.list\n    const resultMap = {}\n    const results = []\n\n    // Check the first item in the list, if it's a string, then we assume\n    // that every item in the list is also a string, and thus it's a flattened array.\n    if (typeof list[0] === 'string') {\n      // Iterate over every item\n      for (let i = 0, len = list.length; i < len; i += 1) {\n        this._analyze({\n          key: '',\n          value: list[i],\n          record: i,\n          index: i\n        }, {\n          resultMap,\n          results,\n          tokenSearchers,\n          fullSearcher\n        })\n      }\n\n      return { weights: null, results }\n    }\n\n    // Otherwise, the first item is an Object (hopefully), and thus the searching\n    // is done on the values of the keys of each item.\n    const weights = {}\n    for (let i = 0, len = list.length; i < len; i += 1) {\n      let item = list[i]\n      // Iterate over every key\n      for (let j = 0, keysLen = this.options.keys.length; j < keysLen; j += 1) {\n        let key = this.options.keys[j]\n        if (typeof key !== 'string') {\n          weights[key.name] = {\n            weight: (1 - key.weight) || 1\n          }\n          if (key.weight <= 0 || key.weight > 1) {\n            throw new Error('Key weight has to be > 0 and <= 1')\n          }\n          key = key.name\n        } else {\n          weights[key] = {\n            weight: 1\n          }\n        }\n\n        this._analyze({\n          key,\n          value: this.options.getFn(item, key),\n          record: item,\n          index: i\n        }, {\n          resultMap,\n          results,\n          tokenSearchers,\n          fullSearcher\n        })\n      }\n\n      if (this.options.recursive.enabled &&\n          isArray(item[this.options.recursive.key]) && \n          item[this.options.recursive.key].length > 0\n      ){\n        const children = this._search(item[this.options.recursive.key], tokenSearchers, fullSearcher)\n        if (resultMap[i]) {\n          const result = Object.assign({}, resultMap[i], {\n            item: Object.assign({}, resultMap[i].item, {\n              [this.options.recursive.key]: children\n            })\n          })\n          const idx = results.indexOf(resultMap[i]);\n          resultMap[i] = result;\n          results[idx] = result;\n        } else if (children.length) {\n          resultMap[i] = {\n            item: Object.assign({}, item, {\n              [this.options.recursive.key]: children\n            }),\n            output: []\n          }\n          results.push(resultMap[i])\n        }\n      }\n    }\n\n    return { weights, results }\n  }\n\n  _analyze ({ key, arrayIndex = -1, value, record, index }, { tokenSearchers = [], fullSearcher = [], resultMap = {}, results = [] }) {\n    // Check if the texvaluet can be searched\n    if (value === undefined || value === null) {\n      return\n    }\n\n    let exists = false\n    let averageScore = -1\n    let numTextMatches = 0\n\n    if (typeof value === 'string') {\n      this._log(`\\nKey: ${key === '' ? '-' : key}`)\n\n      let mainSearchResult = fullSearcher.search(value)\n      this._log(`Full text: \"${value}\", score: ${mainSearchResult.score}`)\n\n      if (this.options.tokenize) {\n        let words = value.split(this.options.tokenSeparator)\n        let scores = []\n\n        for (let i = 0; i < tokenSearchers.length; i += 1) {\n          let tokenSearcher = tokenSearchers[i]\n\n          this._log(`\\nPattern: \"${tokenSearcher.pattern}\"`)\n\n          // let tokenScores = []\n          let hasMatchInText = false\n\n          for (let j = 0; j < words.length; j += 1) {\n            let word = words[j]\n            let tokenSearchResult = tokenSearcher.search(word)\n            let obj = {}\n            if (tokenSearchResult.isMatch) {\n              obj[word] = tokenSearchResult.score\n              exists = true\n              hasMatchInText = true\n              scores.push(tokenSearchResult.score)\n            } else {\n              obj[word] = 1\n              if (!this.options.matchAllTokens) {\n                scores.push(1)\n              }\n            }\n            this._log(`Token: \"${word}\", score: ${obj[word]}`)\n            // tokenScores.push(obj)\n          }\n\n          if (hasMatchInText) {\n            numTextMatches += 1\n          }\n        }\n\n        averageScore = scores[0]\n        let scoresLen = scores.length\n        for (let i = 1; i < scoresLen; i += 1) {\n          averageScore += scores[i]\n        }\n        averageScore = averageScore / scoresLen\n\n        this._log('Token score average:', averageScore)\n      }\n\n      let finalScore = mainSearchResult.score\n      if (averageScore > -1) {\n        finalScore = (finalScore + averageScore) / 2\n      }\n\n      this._log('Score average:', finalScore)\n\n      let checkTextMatches = (this.options.tokenize && this.options.matchAllTokens) ? numTextMatches >= tokenSearchers.length : true\n\n      this._log(`\\nCheck Matches: ${checkTextMatches}`)\n\n      // If a match is found, add the item to <rawResults>, including its score\n      if ((exists || mainSearchResult.isMatch) && checkTextMatches) {\n        // Check if the item already exists in our results\n        let existingResult = resultMap[index]\n        if (existingResult) {\n          // Use the lowest score\n          // existingResult.score, bitapResult.score\n          existingResult.output.push({\n            key,\n            arrayIndex,\n            value,\n            score: finalScore,\n            matchedIndices: mainSearchResult.matchedIndices\n          })\n        } else {\n          // Add it to the raw result list\n          resultMap[index] = {\n            item: record,\n            output: [{\n              key,\n              arrayIndex,\n              value,\n              score: finalScore,\n              matchedIndices: mainSearchResult.matchedIndices\n            }]\n          }\n\n          results.push(resultMap[index])\n        }\n      }\n    } else if (isArray(value)) {\n      for (let i = 0, len = value.length; i < len; i += 1) {\n        this._analyze({\n          key,\n          arrayIndex: i,\n          value: value[i],\n          record,\n          index\n        }, {\n          resultMap,\n          results,\n          tokenSearchers,\n          fullSearcher\n        })\n      }\n    }\n  }\n\n  _computeScore (weights, results) {\n    this._log('\\n\\nComputing score:\\n')\n\n    for (let i = 0, len = results.length; i < len; i += 1) {\n      const output = results[i].output\n      const scoreLen = output.length\n\n      let currScore = 1\n      let bestScore = 1\n\n      for (let j = 0; j < scoreLen; j += 1) {\n        let weight = weights ? weights[output[j].key].weight : 1\n        let score = weight === 1 ? output[j].score : (output[j].score || 0.001)\n        let nScore = score * weight\n\n        if (weight !== 1) {\n          bestScore = Math.min(bestScore, nScore)\n        } else {\n          output[j].nScore = nScore\n          currScore *= nScore\n        }\n      }\n\n      results[i].score = bestScore === 1 ? currScore : bestScore\n\n      this._log(results[i])\n    }\n  }\n\n  _sort (results) {\n    this._log('\\n\\nSorting....')\n    results.sort(this.options.sortFn)\n  }\n\n  _format (results) {\n    const finalOutput = []\n\n    if (this.options.verbose) {\n      this._log('\\n\\nOutput:\\n\\n', JSON.stringify(results))\n    }\n\n    let transformers = []\n\n    if (this.options.includeMatches) {\n      transformers.push((result, data) => {\n        const output = result.output\n        data.matches = []\n\n        for (let i = 0, len = output.length; i < len; i += 1) {\n          let item = output[i]\n\n          if (item.matchedIndices.length === 0) {\n            continue\n          }\n\n          let obj = {\n            indices: item.matchedIndices,\n            value: item.value\n          }\n          if (item.key) {\n            obj.key = item.key\n          }\n          if (item.hasOwnProperty('arrayIndex') && item.arrayIndex > -1) {\n            obj.arrayIndex = item.arrayIndex\n          }\n          data.matches.push(obj)\n        }\n      })\n    }\n\n    if (this.options.includeScore) {\n      transformers.push((result, data) => {\n        data.score = result.score\n      })\n    }\n\n    for (let i = 0, len = results.length; i < len; i += 1) {\n      const result = results[i]\n\n      if (this.options.id) {\n        result.item = this.options.getFn(result.item, this.options.id)[0]\n      }\n\n      if (!transformers.length) {\n        finalOutput.push(result.item)\n        continue\n      }\n\n      const data = {\n        item: result.item\n      }\n\n      for (let j = 0, len = transformers.length; j < len; j += 1) {\n        transformers[j](result, data)\n      }\n\n      finalOutput.push(data)\n    }\n\n    if (this.options.includeMatches && this.options.highlight && this.options.highlight.enabled){\n      finalOutput.forEach(item => {\n        highlighter(item, this.options);\n      });\n    }\n\n    return finalOutput\n  }\n\n  _log () {\n    if (this.options.verbose) {\n      console.log(...arguments)\n    }\n  }\n}\n\nmodule.exports = Fuse\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}